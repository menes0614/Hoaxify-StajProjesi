{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Enes\\\\frontend\\\\src\\\\components\\\\HoaxFeed.js\";\nimport React, { useState, useEffect } from 'react';\nimport { getHoaxes, getOldHoaxes, getNewHoaxCount, getNewHoaxes } from '../api/apiCalls';\nimport { useTranslation } from 'react-i18next';\nimport HoaxView from './HoaxView';\nimport { useApiProgress } from '../shared/ApiProgress';\nimport Spinner from './Spinner';\nimport { useParams } from 'react-router-dom';\n\nconst HoaxFeed = () => {\n  const [hoaxPage, setHoaxPage] = useState({\n    content: [],\n    last: true,\n    number: 0\n  });\n  const [newHoaxCount, setNewHoaxCount] = useState(0);\n  const {\n    t\n  } = useTranslation();\n  const {\n    username\n  } = useParams();\n  const path = username ? `/api/1.0/users/${username}/hoaxes?page=` : '/api/1.0/hoaxes?page=';\n  const initialHoaxLoadProgress = useApiProgress('get', path);\n  let lastHoaxId = 0;\n  let firstHoaxId = 0;\n\n  if (hoaxPage.content.length > 0) {\n    firstHoaxId = hoaxPage.content[0].id;\n    const lastHoaxIndex = hoaxPage.content.length - 1;\n    lastHoaxId = hoaxPage.content[lastHoaxIndex].id;\n  }\n\n  const oldHoaxPath = username ? `/api/1.0/users/${username}/hoaxes/${lastHoaxId}` : `/api/1.0/hoaxes/${lastHoaxId}`;\n  const loadOldHoaxesProgress = useApiProgress('get', oldHoaxPath, true);\n  const newHoaxPath = username ? `/api/1.0/users/${username}/hoaxes/${firstHoaxId}?direction=after` : `/api/1.0/hoaxes/${firstHoaxId}?direction=after`;\n  const loadNewHoaxesProgress = useApiProgress('get', newHoaxPath, true);\n  useEffect(() => {\n    const getCount = async () => {\n      const response = await getNewHoaxCount(firstHoaxId, username);\n      setNewHoaxCount(response.data.count);\n    };\n\n    let looper = setInterval(getCount, 5000);\n    return function cleanup() {\n      clearInterval(looper);\n    };\n  }, [firstHoaxId, username]);\n  useEffect(() => {\n    const loadHoaxes = async page => {\n      try {\n        const response = await getHoaxes(username, page);\n        setHoaxPage(previousHoaxPage => ({ ...response.data,\n          content: [...previousHoaxPage.content, ...response.data.content]\n        }));\n      } catch (error) {}\n    };\n\n    loadHoaxes();\n  }, [username]);\n\n  const loadOldHoaxes = async () => {\n    const response = await getOldHoaxes(lastHoaxId, username);\n    setHoaxPage(previousHoaxPage => ({ ...response.data,\n      content: [...previousHoaxPage.content, ...response.data.content]\n    }));\n  };\n\n  const loadNewHoaxes = async () => {\n    const response = await getNewHoaxes(firstHoaxId, username);\n    setHoaxPage(previousHoaxPage => ({ ...previousHoaxPage,\n      content: [...response.data, ...previousHoaxPage.content]\n    }));\n    setNewHoaxCount(0);\n  };\n\n  const onDeleteHoaxSuccess = id => {\n    setHoaxPage(previousHoaxPage => ({ ...previousHoaxPage,\n      content: previousHoaxPage.content.filter(hoax => hoax.id !== id)\n    }));\n  };\n\n  const {\n    content,\n    last\n  } = hoaxPage;\n\n  if (content.length === 0) {\n    return React.createElement(\"div\", {\n      className: \"alert alert-secondary text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, initialHoaxLoadProgress ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }) : t('There are no hoaxes'));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, newHoaxCount > 0 && React.createElement(\"div\", {\n    className: \"alert alert-secondary text-center mb-1\",\n    style: {\n      cursor: loadNewHoaxesProgress ? 'not-allowed' : 'pointer'\n    },\n    onClick: loadNewHoaxesProgress ? () => {} : loadNewHoaxes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, loadNewHoaxesProgress ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }) : t('There are new hoaxes')), content.map(hoax => {\n    return React.createElement(HoaxView, {\n      key: hoax.id,\n      hoax: hoax,\n      onDeleteHoax: onDeleteHoaxSuccess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    });\n  }), !last && React.createElement(\"div\", {\n    className: \"alert alert-secondary text-center\",\n    style: {\n      cursor: loadOldHoaxesProgress ? 'not-allowed' : 'pointer'\n    },\n    onClick: loadOldHoaxesProgress ? () => {} : loadOldHoaxes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, loadOldHoaxesProgress ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }) : t('Load old hoaxes')));\n};\n\nexport default HoaxFeed;","map":{"version":3,"sources":["C:/Users/Enes/frontend/src/components/HoaxFeed.js"],"names":["React","useState","useEffect","getHoaxes","getOldHoaxes","getNewHoaxCount","getNewHoaxes","useTranslation","HoaxView","useApiProgress","Spinner","useParams","HoaxFeed","hoaxPage","setHoaxPage","content","last","number","newHoaxCount","setNewHoaxCount","t","username","path","initialHoaxLoadProgress","lastHoaxId","firstHoaxId","length","id","lastHoaxIndex","oldHoaxPath","loadOldHoaxesProgress","newHoaxPath","loadNewHoaxesProgress","getCount","response","data","count","looper","setInterval","cleanup","clearInterval","loadHoaxes","page","previousHoaxPage","error","loadOldHoaxes","loadNewHoaxes","onDeleteHoaxSuccess","filter","hoax","cursor","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getHoaxes, getOldHoaxes, getNewHoaxCount, getNewHoaxes } from '../api/apiCalls';\r\nimport { useTranslation } from 'react-i18next';\r\nimport HoaxView from './HoaxView';\r\nimport { useApiProgress } from '../shared/ApiProgress';\r\nimport Spinner from './Spinner';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst HoaxFeed = () => {\r\n  const [hoaxPage, setHoaxPage] = useState({ content: [], last: true, number: 0 });\r\n  const [newHoaxCount, setNewHoaxCount] = useState(0);\r\n  const { t } = useTranslation();\r\n  const { username } = useParams();\r\n\r\n  const path = username ? `/api/1.0/users/${username}/hoaxes?page=` : '/api/1.0/hoaxes?page=';\r\n  const initialHoaxLoadProgress = useApiProgress('get', path);\r\n\r\n  let lastHoaxId = 0;\r\n  let firstHoaxId = 0;\r\n  if (hoaxPage.content.length > 0) {\r\n    firstHoaxId = hoaxPage.content[0].id;\r\n\r\n    const lastHoaxIndex = hoaxPage.content.length - 1;\r\n    lastHoaxId = hoaxPage.content[lastHoaxIndex].id;\r\n  }\r\n  const oldHoaxPath = username ? `/api/1.0/users/${username}/hoaxes/${lastHoaxId}` : `/api/1.0/hoaxes/${lastHoaxId}`;\r\n  const loadOldHoaxesProgress = useApiProgress('get', oldHoaxPath, true);\r\n\r\n  const newHoaxPath = username\r\n    ? `/api/1.0/users/${username}/hoaxes/${firstHoaxId}?direction=after`\r\n    : `/api/1.0/hoaxes/${firstHoaxId}?direction=after`;\r\n\r\n  const loadNewHoaxesProgress = useApiProgress('get', newHoaxPath, true);\r\n\r\n  useEffect(() => {\r\n    const getCount = async () => {\r\n      const response = await getNewHoaxCount(firstHoaxId, username);\r\n      setNewHoaxCount(response.data.count);\r\n    };\r\n    let looper = setInterval(getCount, 5000);\r\n    return function cleanup() {\r\n      clearInterval(looper);\r\n    };\r\n  }, [firstHoaxId, username]);\r\n\r\n  useEffect(() => {\r\n    const loadHoaxes = async page => {\r\n      try {\r\n        const response = await getHoaxes(username, page);\r\n        setHoaxPage(previousHoaxPage => ({\r\n          ...response.data,\r\n          content: [...previousHoaxPage.content, ...response.data.content]\r\n        }));\r\n      } catch (error) {}\r\n    };\r\n    loadHoaxes();\r\n  }, [username]);\r\n\r\n  const loadOldHoaxes = async () => {\r\n    const response = await getOldHoaxes(lastHoaxId, username);\r\n    setHoaxPage(previousHoaxPage => ({\r\n      ...response.data,\r\n      content: [...previousHoaxPage.content, ...response.data.content]\r\n    }));\r\n  };\r\n\r\n  const loadNewHoaxes = async () => {\r\n    const response = await getNewHoaxes(firstHoaxId, username);\r\n    setHoaxPage(previousHoaxPage => ({\r\n      ...previousHoaxPage,\r\n      content: [...response.data, ...previousHoaxPage.content]\r\n    }));\r\n    setNewHoaxCount(0);\r\n  };\r\n\r\n  const onDeleteHoaxSuccess = id => {\r\n    setHoaxPage(previousHoaxPage => ({\r\n      ...previousHoaxPage,\r\n      content: previousHoaxPage.content.filter(hoax => hoax.id !== id)\r\n    }));\r\n  };\r\n\r\n  const { content, last } = hoaxPage;\r\n\r\n  if (content.length === 0) {\r\n    return <div className=\"alert alert-secondary text-center\">{initialHoaxLoadProgress ? <Spinner /> : t('There are no hoaxes')}</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {newHoaxCount > 0 && (\r\n        <div\r\n          className=\"alert alert-secondary text-center mb-1\"\r\n          style={{ cursor: loadNewHoaxesProgress ? 'not-allowed' : 'pointer' }}\r\n          onClick={loadNewHoaxesProgress ? () => {} : loadNewHoaxes}\r\n        >\r\n          {loadNewHoaxesProgress ? <Spinner /> : t('There are new hoaxes')}\r\n        </div>\r\n      )}\r\n      {content.map(hoax => {\r\n        return <HoaxView key={hoax.id} hoax={hoax} onDeleteHoax={onDeleteHoaxSuccess} />;\r\n      })}\r\n      {!last && (\r\n        <div\r\n          className=\"alert alert-secondary text-center\"\r\n          style={{ cursor: loadOldHoaxesProgress ? 'not-allowed' : 'pointer' }}\r\n          onClick={loadOldHoaxesProgress ? () => {} : loadOldHoaxes}\r\n        >\r\n          {loadOldHoaxesProgress ? <Spinner /> : t('Load old hoaxes')}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HoaxFeed;\r\n"]},"metadata":{},"sourceType":"module"}